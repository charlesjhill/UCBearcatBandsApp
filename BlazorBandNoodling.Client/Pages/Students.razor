@page "/students"
@using BlazorBandNoodling.Shared.Models
@using Microsoft.AspNetCore.WebUtilities
@inject HttpClient Http

<h1>Student Operations</h1>

@if (students == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container-fluid">
        <div class="row mb-3 justify-content-between">
            <div class="col">
                <div class="btn-group" role="group" aria-label="Add Students">
                    <button class="btn btn-primary" type="button" onclick="@AddStudent">
                        Add Student
                    </button>
                    <button class="btn btn-dark" type="button" onclick="@(async () => await AddExampleStudentAsync())">
                        Add Example Student
                    </button>
                </div>
            </div>
            <div class="col">
                <div class="input-group">
                    <input class="form-control" type="text" placeholder="Search" bind="@FilterString" />
                    <div class="input-group-append">
                        <button type="submit" class="btn btn-info" onclick="@FilterStudents">Filter</button>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <table class="table table-striped">
        <caption>List of Students</caption>
        <thead>
            <tr>
                <th scope="col">Last Name</th>
                <th scope="col">First Name</th>
                <th scope="col">M-Number</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var student in students)
            {
                <tr>
                    <td>@student.LastName</td>
                    <td>@student.FirstName</td>
                    <td>@student.MNumber</td>
                    <td class="btn-group">
                        <button class="btn btn-light" onclick="@(async () => await EditStudent(student.ID))">Edit</button>
                        <button class="btn btn-danger" onclick="@(async () => await DeleteConfirm(student.ID))">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (isAddOrEdit)
    {
        <StudentAddModal Title="@ModalTitle" Student="@selectedStudent"
                         OnSave="@SaveStudent" OnCancel="@CloseModal" />
    }

    @if (isDelete)
    {
        <StudentDeleteModal Title="@ModalTitle" Student="@selectedStudent"
                            OnSave="@DeleteStudent" OnCancel="@CloseModal" />
    }
}

@functions {
    protected Student[] students;
    protected bool isAddOrEdit = false;
    protected bool isDelete = false;

    protected string ModalTitle { get; set; }
    protected Student selectedStudent = new Student();

    protected string FilterString { get; set; } = "";

    // Initialization/Utility Functions

    protected override async Task OnInitAsync()
    {
        await GetStudents();
    }

    protected async Task AddExampleStudentAsync()
    {
        var student = new Student
        {
            FirstName = "Ben",
            LastName = "Hollar",
            MNumber = "M12345678"
        };
        await Http.PostJsonAsync("api/Students", student);

        await GetStudents();
    }

    // DOM Manipulation Functions

    protected void CloseModal()
    {
        this.isAddOrEdit = false;
        this.isDelete = false;
    }

    protected void AddStudent()
    {
        selectedStudent = new Student();
        ModalTitle = "Add Student";
        isAddOrEdit = true;
    }

    protected async Task EditStudent(int id)
    {
        selectedStudent = await Http.GetJsonAsync<Student>($"api/Students/{id}");
        ModalTitle = "Edit Student";
        isAddOrEdit = true;
    }

    protected async Task DeleteConfirm(int id)
    {
        selectedStudent = await Http.GetJsonAsync<Student>($"api/Students/{id}");
        ModalTitle = "Delete Student";
        isDelete = true;
    }

    // DB Interaction Functions

    protected async Task FilterStudents()
    {
        await GetStudents(); // GetStudents applies any filterstring
    }

    protected async Task GetStudents()
    {
        string url = "api/Students";
        url = QueryHelpers.AddQueryString(url, "filterString", FilterString);
        students = await Http.GetJsonAsync<Student[]>(url);
    }

    protected async Task DeleteStudent()
    {
        await Http.DeleteAsync($"api/Students/{selectedStudent.ID}");
        isDelete = false;
        await GetStudents();
    }

    protected async Task SaveStudent()
    {
        if (selectedStudent.ID != 0)
        {
            await Http.PutJsonAsync($"api/Students/{selectedStudent.ID}", selectedStudent);
        }
        else
        {
            await Http.PostJsonAsync($"api/Students", selectedStudent);
        }
        isAddOrEdit = false;
        await GetStudents();

    }

}
